// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
)

type User struct {
	Id    int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name  string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Email string `thrift:"email,3" frugal:"3,default,string" json:"email"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetId() (v int64) {
	return p.Id
}

func (p *User) GetName() (v string) {
	return p.Name
}

func (p *User) GetEmail() (v string) {
	return p.Email
}
func (p *User) SetId(val int64) {
	p.Id = val
}
func (p *User) SetName(val string) {
	p.Name = val
}
func (p *User) SetEmail(val string) {
	p.Email = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "id",
	2: "name",
	3: "email",
}

type CreateUserRequest struct {
	Name  string `thrift:"name,1" frugal:"1,default,string" json:"name"`
	Email string `thrift:"email,2" frugal:"2,default,string" json:"email"`
}

func NewCreateUserRequest() *CreateUserRequest {
	return &CreateUserRequest{}
}

func (p *CreateUserRequest) InitDefault() {
}

func (p *CreateUserRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateUserRequest) GetEmail() (v string) {
	return p.Email
}
func (p *CreateUserRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateUserRequest) SetEmail(val string) {
	p.Email = val
}

func (p *CreateUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserRequest(%+v)", *p)
}

var fieldIDToName_CreateUserRequest = map[int16]string{
	1: "name",
	2: "email",
}

type GetUserRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewGetUserRequest() *GetUserRequest {
	return &GetUserRequest{}
}

func (p *GetUserRequest) InitDefault() {
}

func (p *GetUserRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetUserRequest) SetId(val int64) {
	p.Id = val
}

func (p *GetUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserRequest(%+v)", *p)
}

var fieldIDToName_GetUserRequest = map[int16]string{
	1: "id",
}

type UserService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (r *User, err error)

	Getuser(ctx context.Context, request *GetUserRequest) (r *User, err error)
}

type UserServiceCreateUserArgs struct {
	Request *CreateUserRequest `thrift:"request,1" frugal:"1,default,CreateUserRequest" json:"request"`
}

func NewUserServiceCreateUserArgs() *UserServiceCreateUserArgs {
	return &UserServiceCreateUserArgs{}
}

func (p *UserServiceCreateUserArgs) InitDefault() {
}

var UserServiceCreateUserArgs_Request_DEFAULT *CreateUserRequest

func (p *UserServiceCreateUserArgs) GetRequest() (v *CreateUserRequest) {
	if !p.IsSetRequest() {
		return UserServiceCreateUserArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceCreateUserArgs) SetRequest(val *CreateUserRequest) {
	p.Request = val
}

func (p *UserServiceCreateUserArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserArgs = map[int16]string{
	1: "request",
}

type UserServiceCreateUserResult struct {
	Success *User `thrift:"success,0,optional" frugal:"0,optional,User" json:"success,omitempty"`
}

func NewUserServiceCreateUserResult() *UserServiceCreateUserResult {
	return &UserServiceCreateUserResult{}
}

func (p *UserServiceCreateUserResult) InitDefault() {
}

var UserServiceCreateUserResult_Success_DEFAULT *User

func (p *UserServiceCreateUserResult) GetSuccess() (v *User) {
	if !p.IsSetSuccess() {
		return UserServiceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*User)
}

func (p *UserServiceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserResult = map[int16]string{
	0: "success",
}

type UserServiceGetuserArgs struct {
	Request *GetUserRequest `thrift:"request,1" frugal:"1,default,GetUserRequest" json:"request"`
}

func NewUserServiceGetuserArgs() *UserServiceGetuserArgs {
	return &UserServiceGetuserArgs{}
}

func (p *UserServiceGetuserArgs) InitDefault() {
}

var UserServiceGetuserArgs_Request_DEFAULT *GetUserRequest

func (p *UserServiceGetuserArgs) GetRequest() (v *GetUserRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetuserArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetuserArgs) SetRequest(val *GetUserRequest) {
	p.Request = val
}

func (p *UserServiceGetuserArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetuserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetuserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetuserArgs = map[int16]string{
	1: "request",
}

type UserServiceGetuserResult struct {
	Success *User `thrift:"success,0,optional" frugal:"0,optional,User" json:"success,omitempty"`
}

func NewUserServiceGetuserResult() *UserServiceGetuserResult {
	return &UserServiceGetuserResult{}
}

func (p *UserServiceGetuserResult) InitDefault() {
}

var UserServiceGetuserResult_Success_DEFAULT *User

func (p *UserServiceGetuserResult) GetSuccess() (v *User) {
	if !p.IsSetSuccess() {
		return UserServiceGetuserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetuserResult) SetSuccess(x interface{}) {
	p.Success = x.(*User)
}

func (p *UserServiceGetuserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetuserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetuserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetuserResult = map[int16]string{
	0: "success",
}
