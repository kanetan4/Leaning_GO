// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package notes

import (
	"context"
	"fmt"
)

type Note struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	User       string `thrift:"user,2" frugal:"2,default,string" json:"user"`
	Title      string `thrift:"title,3" frugal:"3,default,string" json:"title"`
	Content    string `thrift:"content,4" frugal:"4,default,string" json:"content"`
	CreateTime int64  `thrift:"create_time,5" frugal:"5,default,i64" json:"create_time"`
}

func NewNote() *Note {
	return &Note{}
}

func (p *Note) InitDefault() {
}

func (p *Note) GetId() (v int64) {
	return p.Id
}

func (p *Note) GetUser() (v string) {
	return p.User
}

func (p *Note) GetTitle() (v string) {
	return p.Title
}

func (p *Note) GetContent() (v string) {
	return p.Content
}

func (p *Note) GetCreateTime() (v int64) {
	return p.CreateTime
}
func (p *Note) SetId(val int64) {
	p.Id = val
}
func (p *Note) SetUser(val string) {
	p.User = val
}
func (p *Note) SetTitle(val string) {
	p.Title = val
}
func (p *Note) SetContent(val string) {
	p.Content = val
}
func (p *Note) SetCreateTime(val int64) {
	p.CreateTime = val
}

func (p *Note) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Note(%+v)", *p)
}

var fieldIDToName_Note = map[int16]string{
	1: "id",
	2: "user",
	3: "title",
	4: "content",
	5: "create_time",
}

type CreateNoteRequest struct {
	User    string `thrift:"user,1" frugal:"1,default,string" json:"user"`
	Title   string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Content string `thrift:"content,3" frugal:"3,default,string" json:"content"`
}

func NewCreateNoteRequest() *CreateNoteRequest {
	return &CreateNoteRequest{}
}

func (p *CreateNoteRequest) InitDefault() {
}

func (p *CreateNoteRequest) GetUser() (v string) {
	return p.User
}

func (p *CreateNoteRequest) GetTitle() (v string) {
	return p.Title
}

func (p *CreateNoteRequest) GetContent() (v string) {
	return p.Content
}
func (p *CreateNoteRequest) SetUser(val string) {
	p.User = val
}
func (p *CreateNoteRequest) SetTitle(val string) {
	p.Title = val
}
func (p *CreateNoteRequest) SetContent(val string) {
	p.Content = val
}

func (p *CreateNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNoteRequest(%+v)", *p)
}

var fieldIDToName_CreateNoteRequest = map[int16]string{
	1: "user",
	2: "title",
	3: "content",
}

type GetNoteRequest struct {
	User string `thrift:"user,1" frugal:"1,default,string" json:"user"`
	Id   int64  `thrift:"id,2" frugal:"2,default,i64" json:"id"`
}

func NewGetNoteRequest() *GetNoteRequest {
	return &GetNoteRequest{}
}

func (p *GetNoteRequest) InitDefault() {
}

func (p *GetNoteRequest) GetUser() (v string) {
	return p.User
}

func (p *GetNoteRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetNoteRequest) SetUser(val string) {
	p.User = val
}
func (p *GetNoteRequest) SetId(val int64) {
	p.Id = val
}

func (p *GetNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteRequest(%+v)", *p)
}

var fieldIDToName_GetNoteRequest = map[int16]string{
	1: "user",
	2: "id",
}

type DeleteNoteRequest struct {
	User string `thrift:"user,1" frugal:"1,default,string" json:"user"`
	Id   int64  `thrift:"id,2" frugal:"2,default,i64" json:"id"`
}

func NewDeleteNoteRequest() *DeleteNoteRequest {
	return &DeleteNoteRequest{}
}

func (p *DeleteNoteRequest) InitDefault() {
}

func (p *DeleteNoteRequest) GetUser() (v string) {
	return p.User
}

func (p *DeleteNoteRequest) GetId() (v int64) {
	return p.Id
}
func (p *DeleteNoteRequest) SetUser(val string) {
	p.User = val
}
func (p *DeleteNoteRequest) SetId(val int64) {
	p.Id = val
}

func (p *DeleteNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNoteRequest(%+v)", *p)
}

var fieldIDToName_DeleteNoteRequest = map[int16]string{
	1: "user",
	2: "id",
}

type NoteService interface {
	CreateNote(ctx context.Context, request *CreateNoteRequest) (r *Note, err error)

	GetNote(ctx context.Context, request *GetNoteRequest) (r *Note, err error)

	ListNotes(ctx context.Context, user string) (r []*Note, err error)

	DeleteNote(ctx context.Context, request *DeleteNoteRequest) (r bool, err error)
}

type NoteServiceCreateNoteArgs struct {
	Request *CreateNoteRequest `thrift:"request,1" frugal:"1,default,CreateNoteRequest" json:"request"`
}

func NewNoteServiceCreateNoteArgs() *NoteServiceCreateNoteArgs {
	return &NoteServiceCreateNoteArgs{}
}

func (p *NoteServiceCreateNoteArgs) InitDefault() {
}

var NoteServiceCreateNoteArgs_Request_DEFAULT *CreateNoteRequest

func (p *NoteServiceCreateNoteArgs) GetRequest() (v *CreateNoteRequest) {
	if !p.IsSetRequest() {
		return NoteServiceCreateNoteArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *NoteServiceCreateNoteArgs) SetRequest(val *CreateNoteRequest) {
	p.Request = val
}

func (p *NoteServiceCreateNoteArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *NoteServiceCreateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceCreateNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceCreateNoteArgs = map[int16]string{
	1: "request",
}

type NoteServiceCreateNoteResult struct {
	Success *Note `thrift:"success,0,optional" frugal:"0,optional,Note" json:"success,omitempty"`
}

func NewNoteServiceCreateNoteResult() *NoteServiceCreateNoteResult {
	return &NoteServiceCreateNoteResult{}
}

func (p *NoteServiceCreateNoteResult) InitDefault() {
}

var NoteServiceCreateNoteResult_Success_DEFAULT *Note

func (p *NoteServiceCreateNoteResult) GetSuccess() (v *Note) {
	if !p.IsSetSuccess() {
		return NoteServiceCreateNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceCreateNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*Note)
}

func (p *NoteServiceCreateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceCreateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceCreateNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceCreateNoteResult = map[int16]string{
	0: "success",
}

type NoteServiceGetNoteArgs struct {
	Request *GetNoteRequest `thrift:"request,1" frugal:"1,default,GetNoteRequest" json:"request"`
}

func NewNoteServiceGetNoteArgs() *NoteServiceGetNoteArgs {
	return &NoteServiceGetNoteArgs{}
}

func (p *NoteServiceGetNoteArgs) InitDefault() {
}

var NoteServiceGetNoteArgs_Request_DEFAULT *GetNoteRequest

func (p *NoteServiceGetNoteArgs) GetRequest() (v *GetNoteRequest) {
	if !p.IsSetRequest() {
		return NoteServiceGetNoteArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *NoteServiceGetNoteArgs) SetRequest(val *GetNoteRequest) {
	p.Request = val
}

func (p *NoteServiceGetNoteArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *NoteServiceGetNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceGetNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceGetNoteArgs = map[int16]string{
	1: "request",
}

type NoteServiceGetNoteResult struct {
	Success *Note `thrift:"success,0,optional" frugal:"0,optional,Note" json:"success,omitempty"`
}

func NewNoteServiceGetNoteResult() *NoteServiceGetNoteResult {
	return &NoteServiceGetNoteResult{}
}

func (p *NoteServiceGetNoteResult) InitDefault() {
}

var NoteServiceGetNoteResult_Success_DEFAULT *Note

func (p *NoteServiceGetNoteResult) GetSuccess() (v *Note) {
	if !p.IsSetSuccess() {
		return NoteServiceGetNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceGetNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*Note)
}

func (p *NoteServiceGetNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceGetNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceGetNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceGetNoteResult = map[int16]string{
	0: "success",
}

type NoteServiceListNotesArgs struct {
	User string `thrift:"user,1" frugal:"1,default,string" json:"user"`
}

func NewNoteServiceListNotesArgs() *NoteServiceListNotesArgs {
	return &NoteServiceListNotesArgs{}
}

func (p *NoteServiceListNotesArgs) InitDefault() {
}

func (p *NoteServiceListNotesArgs) GetUser() (v string) {
	return p.User
}
func (p *NoteServiceListNotesArgs) SetUser(val string) {
	p.User = val
}

func (p *NoteServiceListNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceListNotesArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceListNotesArgs = map[int16]string{
	1: "user",
}

type NoteServiceListNotesResult struct {
	Success []*Note `thrift:"success,0,optional" frugal:"0,optional,list<Note>" json:"success,omitempty"`
}

func NewNoteServiceListNotesResult() *NoteServiceListNotesResult {
	return &NoteServiceListNotesResult{}
}

func (p *NoteServiceListNotesResult) InitDefault() {
}

var NoteServiceListNotesResult_Success_DEFAULT []*Note

func (p *NoteServiceListNotesResult) GetSuccess() (v []*Note) {
	if !p.IsSetSuccess() {
		return NoteServiceListNotesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceListNotesResult) SetSuccess(x interface{}) {
	p.Success = x.([]*Note)
}

func (p *NoteServiceListNotesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceListNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceListNotesResult(%+v)", *p)
}

var fieldIDToName_NoteServiceListNotesResult = map[int16]string{
	0: "success",
}

type NoteServiceDeleteNoteArgs struct {
	Request *DeleteNoteRequest `thrift:"request,1" frugal:"1,default,DeleteNoteRequest" json:"request"`
}

func NewNoteServiceDeleteNoteArgs() *NoteServiceDeleteNoteArgs {
	return &NoteServiceDeleteNoteArgs{}
}

func (p *NoteServiceDeleteNoteArgs) InitDefault() {
}

var NoteServiceDeleteNoteArgs_Request_DEFAULT *DeleteNoteRequest

func (p *NoteServiceDeleteNoteArgs) GetRequest() (v *DeleteNoteRequest) {
	if !p.IsSetRequest() {
		return NoteServiceDeleteNoteArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *NoteServiceDeleteNoteArgs) SetRequest(val *DeleteNoteRequest) {
	p.Request = val
}

func (p *NoteServiceDeleteNoteArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *NoteServiceDeleteNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceDeleteNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceDeleteNoteArgs = map[int16]string{
	1: "request",
}

type NoteServiceDeleteNoteResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewNoteServiceDeleteNoteResult() *NoteServiceDeleteNoteResult {
	return &NoteServiceDeleteNoteResult{}
}

func (p *NoteServiceDeleteNoteResult) InitDefault() {
}

var NoteServiceDeleteNoteResult_Success_DEFAULT bool

func (p *NoteServiceDeleteNoteResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return NoteServiceDeleteNoteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *NoteServiceDeleteNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *NoteServiceDeleteNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceDeleteNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceDeleteNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceDeleteNoteResult = map[int16]string{
	0: "success",
}
