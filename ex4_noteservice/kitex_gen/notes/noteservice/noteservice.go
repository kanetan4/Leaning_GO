// Code generated by Kitex v0.14.1. DO NOT EDIT.

package noteservice

import (
	"context"
	"errors"
	notes "ex4_noteservice/kitex_gen/notes"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateNote": kitex.NewMethodInfo(
		createNoteHandler,
		newNoteServiceCreateNoteArgs,
		newNoteServiceCreateNoteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetNote": kitex.NewMethodInfo(
		getNoteHandler,
		newNoteServiceGetNoteArgs,
		newNoteServiceGetNoteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListNotes": kitex.NewMethodInfo(
		listNotesHandler,
		newNoteServiceListNotesArgs,
		newNoteServiceListNotesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteNote": kitex.NewMethodInfo(
		deleteNoteHandler,
		newNoteServiceDeleteNoteArgs,
		newNoteServiceDeleteNoteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	noteServiceServiceInfo                = NewServiceInfo()
	noteServiceServiceInfoForClient       = NewServiceInfoForClient()
	noteServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return noteServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return noteServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return noteServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "NoteService"
	handlerType := (*notes.NoteService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "notes",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func createNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*notes.NoteServiceCreateNoteArgs)
	realResult := result.(*notes.NoteServiceCreateNoteResult)
	success, err := handler.(notes.NoteService).CreateNote(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNoteServiceCreateNoteArgs() interface{} {
	return notes.NewNoteServiceCreateNoteArgs()
}

func newNoteServiceCreateNoteResult() interface{} {
	return notes.NewNoteServiceCreateNoteResult()
}

func getNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*notes.NoteServiceGetNoteArgs)
	realResult := result.(*notes.NoteServiceGetNoteResult)
	success, err := handler.(notes.NoteService).GetNote(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNoteServiceGetNoteArgs() interface{} {
	return notes.NewNoteServiceGetNoteArgs()
}

func newNoteServiceGetNoteResult() interface{} {
	return notes.NewNoteServiceGetNoteResult()
}

func listNotesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*notes.NoteServiceListNotesArgs)
	realResult := result.(*notes.NoteServiceListNotesResult)
	success, err := handler.(notes.NoteService).ListNotes(ctx, realArg.User)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newNoteServiceListNotesArgs() interface{} {
	return notes.NewNoteServiceListNotesArgs()
}

func newNoteServiceListNotesResult() interface{} {
	return notes.NewNoteServiceListNotesResult()
}

func deleteNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*notes.NoteServiceDeleteNoteArgs)
	realResult := result.(*notes.NoteServiceDeleteNoteResult)
	success, err := handler.(notes.NoteService).DeleteNote(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newNoteServiceDeleteNoteArgs() interface{} {
	return notes.NewNoteServiceDeleteNoteArgs()
}

func newNoteServiceDeleteNoteResult() interface{} {
	return notes.NewNoteServiceDeleteNoteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateNote(ctx context.Context, request *notes.CreateNoteRequest) (r *notes.Note, err error) {
	var _args notes.NoteServiceCreateNoteArgs
	_args.Request = request
	var _result notes.NoteServiceCreateNoteResult
	if err = p.c.Call(ctx, "CreateNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNote(ctx context.Context, request *notes.GetNoteRequest) (r *notes.Note, err error) {
	var _args notes.NoteServiceGetNoteArgs
	_args.Request = request
	var _result notes.NoteServiceGetNoteResult
	if err = p.c.Call(ctx, "GetNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNotes(ctx context.Context, user string) (r []*notes.Note, err error) {
	var _args notes.NoteServiceListNotesArgs
	_args.User = user
	var _result notes.NoteServiceListNotesResult
	if err = p.c.Call(ctx, "ListNotes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNote(ctx context.Context, request *notes.DeleteNoteRequest) (r bool, err error) {
	var _args notes.NoteServiceDeleteNoteArgs
	_args.Request = request
	var _result notes.NoteServiceDeleteNoteResult
	if err = p.c.Call(ctx, "DeleteNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
