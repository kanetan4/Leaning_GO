// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package videos

import (
	"context"
	"fmt"
)

type Video struct {
	Id     int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Title  string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Length int64  `thrift:"length,3" frugal:"3,default,i64" json:"length"`
	Date   int64  `thrift:"date,4" frugal:"4,default,i64" json:"date"`
	Owner  string `thrift:"owner,5" frugal:"5,default,string" json:"owner"`
	Status string `thrift:"status,6" frugal:"6,default,string" json:"status"`
	Format string `thrift:"format,7" frugal:"7,default,string" json:"format"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetId() (v int64) {
	return p.Id
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetLength() (v int64) {
	return p.Length
}

func (p *Video) GetDate() (v int64) {
	return p.Date
}

func (p *Video) GetOwner() (v string) {
	return p.Owner
}

func (p *Video) GetStatus() (v string) {
	return p.Status
}

func (p *Video) GetFormat() (v string) {
	return p.Format
}
func (p *Video) SetId(val int64) {
	p.Id = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetLength(val int64) {
	p.Length = val
}
func (p *Video) SetDate(val int64) {
	p.Date = val
}
func (p *Video) SetOwner(val string) {
	p.Owner = val
}
func (p *Video) SetStatus(val string) {
	p.Status = val
}
func (p *Video) SetFormat(val string) {
	p.Format = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

var fieldIDToName_Video = map[int16]string{
	1: "id",
	2: "title",
	3: "length",
	4: "date",
	5: "owner",
	6: "status",
	7: "format",
}

type VideoList struct {
	Videos []*Video `thrift:"videos,1" frugal:"1,default,list<Video>" json:"videos"`
	Total  int64    `thrift:"total,2" frugal:"2,default,i64" json:"total"`
}

func NewVideoList() *VideoList {
	return &VideoList{}
}

func (p *VideoList) InitDefault() {
}

func (p *VideoList) GetVideos() (v []*Video) {
	return p.Videos
}

func (p *VideoList) GetTotal() (v int64) {
	return p.Total
}
func (p *VideoList) SetVideos(val []*Video) {
	p.Videos = val
}
func (p *VideoList) SetTotal(val int64) {
	p.Total = val
}

func (p *VideoList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoList(%+v)", *p)
}

var fieldIDToName_VideoList = map[int16]string{
	1: "videos",
	2: "total",
}

type AddVideoRequest struct {
	Title  string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Format string `thrift:"format,2" frugal:"2,default,string" json:"format"`
	Length int64  `thrift:"length,3" frugal:"3,default,i64" json:"length"`
	Date   int64  `thrift:"date,4" frugal:"4,default,i64" json:"date"`
	Owner  string `thrift:"owner,5" frugal:"5,default,string" json:"owner"`
}

func NewAddVideoRequest() *AddVideoRequest {
	return &AddVideoRequest{}
}

func (p *AddVideoRequest) InitDefault() {
}

func (p *AddVideoRequest) GetTitle() (v string) {
	return p.Title
}

func (p *AddVideoRequest) GetFormat() (v string) {
	return p.Format
}

func (p *AddVideoRequest) GetLength() (v int64) {
	return p.Length
}

func (p *AddVideoRequest) GetDate() (v int64) {
	return p.Date
}

func (p *AddVideoRequest) GetOwner() (v string) {
	return p.Owner
}
func (p *AddVideoRequest) SetTitle(val string) {
	p.Title = val
}
func (p *AddVideoRequest) SetFormat(val string) {
	p.Format = val
}
func (p *AddVideoRequest) SetLength(val int64) {
	p.Length = val
}
func (p *AddVideoRequest) SetDate(val int64) {
	p.Date = val
}
func (p *AddVideoRequest) SetOwner(val string) {
	p.Owner = val
}

func (p *AddVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddVideoRequest(%+v)", *p)
}

var fieldIDToName_AddVideoRequest = map[int16]string{
	1: "title",
	2: "format",
	3: "length",
	4: "date",
	5: "owner",
}

type GetVideoRequest struct {
	Title string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Id    int64  `thrift:"id,2" frugal:"2,default,i64" json:"id"`
}

func NewGetVideoRequest() *GetVideoRequest {
	return &GetVideoRequest{}
}

func (p *GetVideoRequest) InitDefault() {
}

func (p *GetVideoRequest) GetTitle() (v string) {
	return p.Title
}

func (p *GetVideoRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetVideoRequest) SetTitle(val string) {
	p.Title = val
}
func (p *GetVideoRequest) SetId(val int64) {
	p.Id = val
}

func (p *GetVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoRequest(%+v)", *p)
}

var fieldIDToName_GetVideoRequest = map[int16]string{
	1: "title",
	2: "id",
}

type GetVideoListRequest struct {
	Page      int64  `thrift:"page,1" frugal:"1,default,i64" json:"page"`
	PageSize  int64  `thrift:"pageSize,2" frugal:"2,default,i64" json:"pageSize"`
	SortBy    string `thrift:"sortBy,3" frugal:"3,default,string" json:"sortBy"`
	SortOrder string `thrift:"sortOrder,4" frugal:"4,default,string" json:"sortOrder"`
	User      string `thrift:"user,5" frugal:"5,default,string" json:"user"`
}

func NewGetVideoListRequest() *GetVideoListRequest {
	return &GetVideoListRequest{}
}

func (p *GetVideoListRequest) InitDefault() {
}

func (p *GetVideoListRequest) GetPage() (v int64) {
	return p.Page
}

func (p *GetVideoListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *GetVideoListRequest) GetSortBy() (v string) {
	return p.SortBy
}

func (p *GetVideoListRequest) GetSortOrder() (v string) {
	return p.SortOrder
}

func (p *GetVideoListRequest) GetUser() (v string) {
	return p.User
}
func (p *GetVideoListRequest) SetPage(val int64) {
	p.Page = val
}
func (p *GetVideoListRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetVideoListRequest) SetSortBy(val string) {
	p.SortBy = val
}
func (p *GetVideoListRequest) SetSortOrder(val string) {
	p.SortOrder = val
}
func (p *GetVideoListRequest) SetUser(val string) {
	p.User = val
}

func (p *GetVideoListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoListRequest(%+v)", *p)
}

var fieldIDToName_GetVideoListRequest = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "sortBy",
	4: "sortOrder",
	5: "user",
}

type ManualOverrideRequest struct {
	Id     int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Status string `thrift:"status,2" frugal:"2,default,string" json:"status"`
}

func NewManualOverrideRequest() *ManualOverrideRequest {
	return &ManualOverrideRequest{}
}

func (p *ManualOverrideRequest) InitDefault() {
}

func (p *ManualOverrideRequest) GetId() (v int64) {
	return p.Id
}

func (p *ManualOverrideRequest) GetStatus() (v string) {
	return p.Status
}
func (p *ManualOverrideRequest) SetId(val int64) {
	p.Id = val
}
func (p *ManualOverrideRequest) SetStatus(val string) {
	p.Status = val
}

func (p *ManualOverrideRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManualOverrideRequest(%+v)", *p)
}

var fieldIDToName_ManualOverrideRequest = map[int16]string{
	1: "id",
	2: "status",
}

type DeleteVideoRequest struct {
	Id   int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	User string `thrift:"user,2" frugal:"2,default,string" json:"user"`
}

func NewDeleteVideoRequest() *DeleteVideoRequest {
	return &DeleteVideoRequest{}
}

func (p *DeleteVideoRequest) InitDefault() {
}

func (p *DeleteVideoRequest) GetId() (v int64) {
	return p.Id
}

func (p *DeleteVideoRequest) GetUser() (v string) {
	return p.User
}
func (p *DeleteVideoRequest) SetId(val int64) {
	p.Id = val
}
func (p *DeleteVideoRequest) SetUser(val string) {
	p.User = val
}

func (p *DeleteVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoRequest(%+v)", *p)
}

var fieldIDToName_DeleteVideoRequest = map[int16]string{
	1: "id",
	2: "user",
}

type VideoService interface {
	AddVideo(ctx context.Context, request *AddVideoRequest) (r *Video, err error)

	ManualOverride(ctx context.Context, request *ManualOverrideRequest) (r bool, err error)

	GetVideo(ctx context.Context, request *GetVideoRequest) (r *Video, err error)

	GetVideos(ctx context.Context, request *GetVideoListRequest) (r *VideoList, err error)

	DeleteVideo(ctx context.Context, request *DeleteVideoRequest) (r bool, err error)
}

type VideoServiceAddVideoArgs struct {
	Request *AddVideoRequest `thrift:"request,1" frugal:"1,default,AddVideoRequest" json:"request"`
}

func NewVideoServiceAddVideoArgs() *VideoServiceAddVideoArgs {
	return &VideoServiceAddVideoArgs{}
}

func (p *VideoServiceAddVideoArgs) InitDefault() {
}

var VideoServiceAddVideoArgs_Request_DEFAULT *AddVideoRequest

func (p *VideoServiceAddVideoArgs) GetRequest() (v *AddVideoRequest) {
	if !p.IsSetRequest() {
		return VideoServiceAddVideoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceAddVideoArgs) SetRequest(val *AddVideoRequest) {
	p.Request = val
}

func (p *VideoServiceAddVideoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceAddVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceAddVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceAddVideoArgs = map[int16]string{
	1: "request",
}

type VideoServiceAddVideoResult struct {
	Success *Video `thrift:"success,0,optional" frugal:"0,optional,Video" json:"success,omitempty"`
}

func NewVideoServiceAddVideoResult() *VideoServiceAddVideoResult {
	return &VideoServiceAddVideoResult{}
}

func (p *VideoServiceAddVideoResult) InitDefault() {
}

var VideoServiceAddVideoResult_Success_DEFAULT *Video

func (p *VideoServiceAddVideoResult) GetSuccess() (v *Video) {
	if !p.IsSetSuccess() {
		return VideoServiceAddVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceAddVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Video)
}

func (p *VideoServiceAddVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceAddVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceAddVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceAddVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceManualOverrideArgs struct {
	Request *ManualOverrideRequest `thrift:"request,1" frugal:"1,default,ManualOverrideRequest" json:"request"`
}

func NewVideoServiceManualOverrideArgs() *VideoServiceManualOverrideArgs {
	return &VideoServiceManualOverrideArgs{}
}

func (p *VideoServiceManualOverrideArgs) InitDefault() {
}

var VideoServiceManualOverrideArgs_Request_DEFAULT *ManualOverrideRequest

func (p *VideoServiceManualOverrideArgs) GetRequest() (v *ManualOverrideRequest) {
	if !p.IsSetRequest() {
		return VideoServiceManualOverrideArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceManualOverrideArgs) SetRequest(val *ManualOverrideRequest) {
	p.Request = val
}

func (p *VideoServiceManualOverrideArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceManualOverrideArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManualOverrideArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceManualOverrideArgs = map[int16]string{
	1: "request",
}

type VideoServiceManualOverrideResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewVideoServiceManualOverrideResult() *VideoServiceManualOverrideResult {
	return &VideoServiceManualOverrideResult{}
}

func (p *VideoServiceManualOverrideResult) InitDefault() {
}

var VideoServiceManualOverrideResult_Success_DEFAULT bool

func (p *VideoServiceManualOverrideResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return VideoServiceManualOverrideResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *VideoServiceManualOverrideResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *VideoServiceManualOverrideResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceManualOverrideResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManualOverrideResult(%+v)", *p)
}

var fieldIDToName_VideoServiceManualOverrideResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoArgs struct {
	Request *GetVideoRequest `thrift:"request,1" frugal:"1,default,GetVideoRequest" json:"request"`
}

func NewVideoServiceGetVideoArgs() *VideoServiceGetVideoArgs {
	return &VideoServiceGetVideoArgs{}
}

func (p *VideoServiceGetVideoArgs) InitDefault() {
}

var VideoServiceGetVideoArgs_Request_DEFAULT *GetVideoRequest

func (p *VideoServiceGetVideoArgs) GetRequest() (v *GetVideoRequest) {
	if !p.IsSetRequest() {
		return VideoServiceGetVideoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceGetVideoArgs) SetRequest(val *GetVideoRequest) {
	p.Request = val
}

func (p *VideoServiceGetVideoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceGetVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoArgs = map[int16]string{
	1: "request",
}

type VideoServiceGetVideoResult struct {
	Success *Video `thrift:"success,0,optional" frugal:"0,optional,Video" json:"success,omitempty"`
}

func NewVideoServiceGetVideoResult() *VideoServiceGetVideoResult {
	return &VideoServiceGetVideoResult{}
}

func (p *VideoServiceGetVideoResult) InitDefault() {
}

var VideoServiceGetVideoResult_Success_DEFAULT *Video

func (p *VideoServiceGetVideoResult) GetSuccess() (v *Video) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Video)
}

func (p *VideoServiceGetVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideosArgs struct {
	Request *GetVideoListRequest `thrift:"request,1" frugal:"1,default,GetVideoListRequest" json:"request"`
}

func NewVideoServiceGetVideosArgs() *VideoServiceGetVideosArgs {
	return &VideoServiceGetVideosArgs{}
}

func (p *VideoServiceGetVideosArgs) InitDefault() {
}

var VideoServiceGetVideosArgs_Request_DEFAULT *GetVideoListRequest

func (p *VideoServiceGetVideosArgs) GetRequest() (v *GetVideoListRequest) {
	if !p.IsSetRequest() {
		return VideoServiceGetVideosArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceGetVideosArgs) SetRequest(val *GetVideoListRequest) {
	p.Request = val
}

func (p *VideoServiceGetVideosArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceGetVideosArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideosArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideosArgs = map[int16]string{
	1: "request",
}

type VideoServiceGetVideosResult struct {
	Success *VideoList `thrift:"success,0,optional" frugal:"0,optional,VideoList" json:"success,omitempty"`
}

func NewVideoServiceGetVideosResult() *VideoServiceGetVideosResult {
	return &VideoServiceGetVideosResult{}
}

func (p *VideoServiceGetVideosResult) InitDefault() {
}

var VideoServiceGetVideosResult_Success_DEFAULT *VideoList

func (p *VideoServiceGetVideosResult) GetSuccess() (v *VideoList) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideosResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideosResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoList)
}

func (p *VideoServiceGetVideosResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideosResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideosResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideosResult = map[int16]string{
	0: "success",
}

type VideoServiceDeleteVideoArgs struct {
	Request *DeleteVideoRequest `thrift:"request,1" frugal:"1,default,DeleteVideoRequest" json:"request"`
}

func NewVideoServiceDeleteVideoArgs() *VideoServiceDeleteVideoArgs {
	return &VideoServiceDeleteVideoArgs{}
}

func (p *VideoServiceDeleteVideoArgs) InitDefault() {
}

var VideoServiceDeleteVideoArgs_Request_DEFAULT *DeleteVideoRequest

func (p *VideoServiceDeleteVideoArgs) GetRequest() (v *DeleteVideoRequest) {
	if !p.IsSetRequest() {
		return VideoServiceDeleteVideoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceDeleteVideoArgs) SetRequest(val *DeleteVideoRequest) {
	p.Request = val
}

func (p *VideoServiceDeleteVideoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceDeleteVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteVideoArgs = map[int16]string{
	1: "request",
}

type VideoServiceDeleteVideoResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewVideoServiceDeleteVideoResult() *VideoServiceDeleteVideoResult {
	return &VideoServiceDeleteVideoResult{}
}

func (p *VideoServiceDeleteVideoResult) InitDefault() {
}

var VideoServiceDeleteVideoResult_Success_DEFAULT bool

func (p *VideoServiceDeleteVideoResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteVideoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *VideoServiceDeleteVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *VideoServiceDeleteVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteVideoResult = map[int16]string{
	0: "success",
}
