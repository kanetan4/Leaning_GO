// Code generated by Kitex v0.14.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"errors"
	videos "ex6_LVRS/kitex_gen/videos"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddVideo": kitex.NewMethodInfo(
		addVideoHandler,
		newVideoServiceAddVideoArgs,
		newVideoServiceAddVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ManualOverride": kitex.NewMethodInfo(
		manualOverrideHandler,
		newVideoServiceManualOverrideArgs,
		newVideoServiceManualOverrideResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideo": kitex.NewMethodInfo(
		getVideoHandler,
		newVideoServiceGetVideoArgs,
		newVideoServiceGetVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideos": kitex.NewMethodInfo(
		getVideosHandler,
		newVideoServiceGetVideosArgs,
		newVideoServiceGetVideosResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteVideo": kitex.NewMethodInfo(
		deleteVideoHandler,
		newVideoServiceDeleteVideoArgs,
		newVideoServiceDeleteVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videos.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "videos",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func addVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceAddVideoArgs)
	realResult := result.(*videos.VideoServiceAddVideoResult)
	success, err := handler.(videos.VideoService).AddVideo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceAddVideoArgs() interface{} {
	return videos.NewVideoServiceAddVideoArgs()
}

func newVideoServiceAddVideoResult() interface{} {
	return videos.NewVideoServiceAddVideoResult()
}

func manualOverrideHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceManualOverrideArgs)
	realResult := result.(*videos.VideoServiceManualOverrideResult)
	success, err := handler.(videos.VideoService).ManualOverride(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newVideoServiceManualOverrideArgs() interface{} {
	return videos.NewVideoServiceManualOverrideArgs()
}

func newVideoServiceManualOverrideResult() interface{} {
	return videos.NewVideoServiceManualOverrideResult()
}

func getVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetVideoArgs)
	realResult := result.(*videos.VideoServiceGetVideoResult)
	success, err := handler.(videos.VideoService).GetVideo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoArgs() interface{} {
	return videos.NewVideoServiceGetVideoArgs()
}

func newVideoServiceGetVideoResult() interface{} {
	return videos.NewVideoServiceGetVideoResult()
}

func getVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetVideosArgs)
	realResult := result.(*videos.VideoServiceGetVideosResult)
	success, err := handler.(videos.VideoService).GetVideos(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideosArgs() interface{} {
	return videos.NewVideoServiceGetVideosArgs()
}

func newVideoServiceGetVideosResult() interface{} {
	return videos.NewVideoServiceGetVideosResult()
}

func deleteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceDeleteVideoArgs)
	realResult := result.(*videos.VideoServiceDeleteVideoResult)
	success, err := handler.(videos.VideoService).DeleteVideo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newVideoServiceDeleteVideoArgs() interface{} {
	return videos.NewVideoServiceDeleteVideoArgs()
}

func newVideoServiceDeleteVideoResult() interface{} {
	return videos.NewVideoServiceDeleteVideoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddVideo(ctx context.Context, request *videos.AddVideoRequest) (r *videos.Video, err error) {
	var _args videos.VideoServiceAddVideoArgs
	_args.Request = request
	var _result videos.VideoServiceAddVideoResult
	if err = p.c.Call(ctx, "AddVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ManualOverride(ctx context.Context, request *videos.ManualOverrideRequest) (r bool, err error) {
	var _args videos.VideoServiceManualOverrideArgs
	_args.Request = request
	var _result videos.VideoServiceManualOverrideResult
	if err = p.c.Call(ctx, "ManualOverride", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideo(ctx context.Context, request *videos.GetVideoRequest) (r *videos.Video, err error) {
	var _args videos.VideoServiceGetVideoArgs
	_args.Request = request
	var _result videos.VideoServiceGetVideoResult
	if err = p.c.Call(ctx, "GetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideos(ctx context.Context, request *videos.GetVideoListRequest) (r *videos.VideoList, err error) {
	var _args videos.VideoServiceGetVideosArgs
	_args.Request = request
	var _result videos.VideoServiceGetVideosResult
	if err = p.c.Call(ctx, "GetVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideo(ctx context.Context, request *videos.DeleteVideoRequest) (r bool, err error) {
	var _args videos.VideoServiceDeleteVideoArgs
	_args.Request = request
	var _result videos.VideoServiceDeleteVideoResult
	if err = p.c.Call(ctx, "DeleteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
